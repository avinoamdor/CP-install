#!/bin/bash

# Check before locking $0, as the first user has exclusive lock privileges
if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root (use sudo or su)"
  exit 1
fi
# try to acquire exclusive lock, if failed exit with code 254
[ "${SBA_FLOCKER}" != "$0" ] && exec env SBA_FLOCKER="$0" flock -E 254 -en "/tmp/sbalinux-install.lock" "$0" "$@" || :

set -euo pipefail

[[ ! -z ${SBA_INSTALLER_DEBUG:=""} ]] && set -x

# force english localization for package manager
export LANGUAGE=en_US:en

# script version placeholder should be replaced by CI pipeline
SCRIPT_VER='1.18.16'

# offline package metadata
PACKAGE_DISPLAY_NAME="__CP_PACKAGE_NAME__"
PACKAGE_ID="__CP_PACKAGE_ID__"
PACKAGE_TYPE="__CP_PACKAGE_TYPE__"
PACKAGE_DISTRO="__CP_PACKAGE_DISTRO__"
PACKAGE_FEATURES="__CP_PACKAGE_BLADE_MASK__"
PACKAGE_PLATFORM="__CP_PACKAGE_PLATFORM__"

# embedded arguments to be filled by the management server providing the script, __CP_*__ place holders should be replaced with valid values
# >>REPLACE START
EMBEDDED_MGMT_FQDN='Bsmart-3148ad56-hap2.epmgmt.checkpoint.com'
EMBEDDED_MGMT_KEY='__CP_MGMT_KEY__'
EMBEDDED_MGMT_CA_CERT='LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdyRENDQlpTZ0F3SUJBZ0lKQU51VHd1SGF1UDRFTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUcwTVFzd0NRWUQKVlFRR0V3SlZVekVRTUE0R0ExVUVDQk1IUVhKcGVtOXVZVEVUTUJFR0ExVUVCeE1LVTJOdmRIUnpaR0ZzWlRFYQpNQmdHQTFVRUNoTVJSMjlFWVdSa2VTNWpiMjBzSUVsdVl5NHhMVEFyQmdOVkJBc1RKR2gwZEhBNkx5OWpaWEowCmN5NW5iMlJoWkdSNUxtTnZiUzl5WlhCdmMybDBiM0o1THpFek1ERUdBMVVFQXhNcVIyOGdSR0ZrWkhrZ1UyVmoKZFhKbElFTmxjblJwWm1sallYUmxJRUYxZEdodmNtbDBlU0F0SUVjeU1CNFhEVEl4TURreE9UQTNNVFV5TTFvWApEVEl5TVRBeU1UQTNNVFV5TTFvd0lqRWdNQjRHQTFVRUF3d1hLaTVsY0cxbmJYUXVZMmhsWTJ0d2IybHVkQzVqCmIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEQ0h0TTgzSEp4NUk0ZEFHVGoKWlFlOXIzK1JVQTkvSEZiMzMvWmtqQ0lTTjNibFJCZU5xOCtTL1VRaENQNXpNdHFxdElOTGpIb213UFZWV3NzSQpxZzZmOEFJMGZnY0c4WjlyMDllRVlCcHQ4a3Q2bm0vMmEveHNCUnptNmZDYTFNL3FWOWdHV2FBUmZ3N2tRMEkvCjJtemdYRmJwWFVJd1VyOWNWZ2VEZStDc3Q3dVdPQmJmVm1MRVRKUmVML3psUzlmME11c0VpR2RNQWVGMVp3NGwKNWRtY2ZydnNZUzRJSU8rNVVEU0c2b1ExTjNGNnk1TUxiUUppRmNRUks4NGNUTW9ud2pVVWVqbDQ2WFpjL21HZwpERTlnT2p4SFBWa0s3YnliZjdGUDc2cU0zK1JzMG5ueGFhMVVhSU5MOGI0bTQrUUZpcGpNSlRDVkpOTHNxYlpOCm9BM3JBZ01CQUFHamdnTlFNSUlEVERBTUJnTlZIUk1CQWY4RUFqQUFNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUYKQndNQkJnZ3JCZ0VGQlFjREFqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd09BWURWUjBmQkRFd0x6QXRvQ3VnS1lZbgphSFIwY0RvdkwyTnliQzVuYjJSaFpHUjVMbU52YlM5blpHbG5Nbk14TFRNek1EUXVZM0pzTUYwR0ExVWRJQVJXCk1GUXdTQVlMWUlaSUFZYjliUUVIRndFd09UQTNCZ2dyQmdFRkJRY0NBUllyYUhSMGNEb3ZMMk5sY25ScFptbGoKWVhSbGN5NW5iMlJoWkdSNUxtTnZiUzl5WlhCdmMybDBiM0o1THpBSUJnWm5nUXdCQWdFd2RnWUlLd1lCQlFVSApBUUVFYWpCb01DUUdDQ3NHQVFVRkJ6QUJoaGhvZEhSd09pOHZiMk56Y0M1bmIyUmhaR1I1TG1OdmJTOHdRQVlJCkt3WUJCUVVITUFLR05HaDBkSEE2THk5alpYSjBhV1pwWTJGMFpYTXVaMjlrWVdSa2VTNWpiMjB2Y21Wd2IzTnAKZEc5eWVTOW5aR2xuTWk1amNuUXdId1lEVlIwakJCZ3dGb0FVUU1LOUo0N01OSU13b2pQWCsyeXo4TFFzZ000dwpPUVlEVlIwUkJESXdNSUlYS2k1bGNHMW5iWFF1WTJobFkydHdiMmx1ZEM1amIyMkNGV1Z3YldkdGRDNWphR1ZqCmEzQnZhVzUwTG1OdmJUQWRCZ05WSFE0RUZnUVV0TUpteVdDWmdWeXAvZG9kaWszUGRjNUs4SGN3Z2dGL0Jnb3IKQmdFRUFkWjVBZ1FDQklJQmJ3U0NBV3NCYVFCMkFDbDV2dkNlT1RraDhGWnpuMk9sZCtXK1YzMmNZQXI0K1UxZApKbHdsWGNlRUFBQUJlL3pwMENjQUFBUURBRWN3UlFJZ0ZOd0djWG5rQ2ZiZXNldTRGb2lqSXZFRnY2YXlKczFsCnUzM1RNbG8zemVvQ0lRRHd4M1I3Tk9ib1A1dXBoTy94L242RjlWTXRBZUNlU1BmQ3JZeDVrektsWXdCMkFOK2wKWHF0b2drOGZiSzN1dUY5T1BscnF6YUlTcEdwZWpqc1N3Q0JFWENwekFBQUJlL3pwMGtzQUFBUURBRWN3UlFJZwpWZitHRVdGUGtJdjhIanZOYkZ0WU0zNFdDVHZHaHNhbGt3V3BmT2JNTE4wQ0lRQ0RaR1dNa2I0QTBUUkhXbXMrCkEzNGtkSlhqUTgzVlRTS09zUWsweXNGYmN3QjNBRUhJeXJIZklrWktFTWFoT2dsQ2gxNU9NWXNiQSt2clM4ZG8KOEpCaWxnYjJBQUFCZS96cDBzOEFBQVFEQUVnd1JnSWhBT2IvNklWZm5lVHBsSlNSVEQ4b2krTXhCdFNFT1BXNgpmd0l4WGZ4Kyt2cUNBaUVBdzVSeFJkOTBkUUpmU2l2azhSVjZiUDVuWUM4UzlWdFNyYlNYVG5KRFBCa3dEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUhIUXhGdlU1SENwNERwS2tGQ2xBbGxRQ1NQWmtNc04rL3BVemVlbHFUNG0KcjJxUTI5Y056a1dkV3poTnZHeFVFQWMvWnRtVDZCWjdBUG9YRURiczdXODlRWURra3RndW9zQmhtS2FKMXJjMgpTMFNUQk43NXh3SFc0ZjZxYy94Q1VxbU5BNU0yNTRYQVZMWGFtZDlSQXVIQjQrL25YbnVtN2YzS3pSdHJyN3pyCnlCdWtmQU9OMHFpMXJEMStsdGtxT3JRWDhUcDFhZWZHMmJFZHpjQm05S3J4UW5nWWxCTTNabFhBRkNocDNxR1cKRnJSVVBGbWZZcFRra2hYYVpmQ05vMFBDdDNHWGpaL2R0aVkrMXVhMVc4SlYwMnN6d3Fkbk5aQVFldmtaV1YwdwoyRW85Y1R0Zzk2TjZ1NmR5SWRwR0ZvbmdhM0kwWHpyM1pOdnBuZDlNc0tNPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlFMERDQ0E3aWdBd0lCQWdJQkJ6QU5CZ2txaGtpRzl3MEJBUXNGQURDQmd6RUxNQWtHQTFVRUJoTUNWVk14CkVEQU9CZ05WQkFnVEIwRnlhWHB2Ym1FeEV6QVJCZ05WQkFjVENsTmpiM1IwYzJSaGJHVXhHakFZQmdOVkJBb1QKRVVkdlJHRmtaSGt1WTI5dExDQkpibU11TVRFd0x3WURWUVFERXloSGJ5QkVZV1JrZVNCU2IyOTBJRU5sY25ScApabWxqWVhSbElFRjFkR2h2Y21sMGVTQXRJRWN5TUI0WERURXhNRFV3TXpBM01EQXdNRm9YRFRNeE1EVXdNekEzCk1EQXdNRm93Z2JReEN6QUpCZ05WQkFZVEFsVlRNUkF3RGdZRFZRUUlFd2RCY21sNmIyNWhNUk13RVFZRFZRUUgKRXdwVFkyOTBkSE5rWVd4bE1Sb3dHQVlEVlFRS0V4RkhiMFJoWkdSNUxtTnZiU3dnU1c1akxqRXRNQ3NHQTFVRQpDeE1rYUhSMGNEb3ZMMk5sY25SekxtZHZaR0ZrWkhrdVkyOXRMM0psY0c5emFYUnZjbmt2TVRNd01RWURWUVFECkV5cEhieUJFWVdSa2VTQlRaV04xY21VZ1EyVnlkR2xtYVdOaGRHVWdRWFYwYUc5eWFYUjVJQzBnUnpJd2dnRWkKTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDNTRNc1ExSzkydmRTVFl1c3daTGlCQ0d6RApCTmxpRjQ0di96NWx6NC9PWXVZOFVoemFGa1ZMVmF0NGEyT0RZcERPRDJsc21jZ2FGSXRNekVVejZvamNucU92CksvNkFZWjE1VjhUUEx2US9NRHhkUi95YUZyekRONVpCVVk0UlMxVDRLTDdRakw3d01EZ2U4N0FtK0daSFkyM2UKY1NaSGp6aEhVOUZHSGJUajNBRHFSYXk5dkhIWnFtOEEyOXZOTURwNVQxOU1SL2dkNzF2Q3hKMWdPN0d5UTVIWQpwRE5PNnJQV0owK3RKWXFseHZUVjBLYXVkQVZrVjRpMVJGWFVMU282UHZpNHZla3lDZ0tVWk1RV09sRHhTcTduCmVUT3ZEQ0FIZitqZkJEbkNhUUpzWTFMNmQ4RWJ5SFNIeUxtVEdGQlVOVXRwVHJ3NzAwa3VIOXpCMGxMN0FnTUIKQUFHamdnRWFNSUlCRmpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUE0R0ExVWREd0VCL3dRRUF3SUJCakFkQmdOVgpIUTRFRmdRVVFNSzlKNDdNTklNd29qUFgrMnl6OExRc2dNNHdId1lEVlIwakJCZ3dGb0FVT3BxRkJ4Qm5LTGJ2CjlyMEZRVzRnd1pUYUQ5NHdOQVlJS3dZQkJRVUhBUUVFS0RBbU1DUUdDQ3NHQVFVRkJ6QUJoaGhvZEhSd09pOHYKYjJOemNDNW5iMlJoWkdSNUxtTnZiUzh3TlFZRFZSMGZCQzR3TERBcW9DaWdKb1lrYUhSMGNEb3ZMMk55YkM1bgpiMlJoWkdSNUxtTnZiUzluWkhKdmIzUXRaekl1WTNKc01FWUdBMVVkSUFRL01EMHdPd1lFVlIwZ0FEQXpNREVHCkNDc0dBUVVGQndJQkZpVm9kSFJ3Y3pvdkwyTmxjblJ6TG1kdlpHRmtaSGt1WTI5dEwzSmxjRzl6YVhSdmNua3YKTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBSWZteVRFTWc0dUphcGtFdi9vVjlQQk85c1BweUlCc2xRajZaego5MWN4Rzc2ODVDL2IrTHJUVytDMDUrWjVZZzRNb3RkcVkzTXh0ZldvU0tRN0NDMmlYWkRYdEh3bFR4RldNTVMyClJKMTdMSjNsWHVidkRHR3F2K1FxRys2RW5yaURmY0ZEemtTbkUzQU5rUi8weUJPdGcyRFoySEtvY3lRZXRhd2kKRHNvWGlXSllSQnVyaVNVQkFBL054QnRpMjFHMDB3OVJLcHYwdkhQOGRzNDJwTTNaMkN6cXJwdjFLcktRMFUxMQpHSW8vaWtHUUkzMWJTLzZrQTFpYlJyTERZR0NEK0gxUVFjN0NvWkREdSs4Q0w5SVZWTzVFRmRrS3JxZUtNKzJ4CkxYWTJKdHdFNjUvM1lSOFYzSWR2N2thV0tLMmhKbjBLQ2FjdUJLT052UGk4QkRBQgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlFZlRDQ0EyV2dBd0lCQWdJREcrY1ZNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1HTXhDekFKQmdOVkJBWVRBbFZUCk1TRXdId1lEVlFRS0V4aFVhR1VnUjI4Z1JHRmtaSGtnUjNKdmRYQXNJRWx1WXk0eE1UQXZCZ05WQkFzVEtFZHYKSUVSaFpHUjVJRU5zWVhOeklESWdRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm9iM0pwZEhrd0hoY05NVFF3TVRBeApNRGN3TURBd1doY05NekV3TlRNd01EY3dNREF3V2pDQmd6RUxNQWtHQTFVRUJoTUNWVk14RURBT0JnTlZCQWdUCkIwRnlhWHB2Ym1FeEV6QVJCZ05WQkFjVENsTmpiM1IwYzJSaGJHVXhHakFZQmdOVkJBb1RFVWR2UkdGa1pIa3UKWTI5dExDQkpibU11TVRFd0x3WURWUVFERXloSGJ5QkVZV1JrZVNCU2IyOTBJRU5sY25ScFptbGpZWFJsSUVGMQpkR2h2Y21sMGVTQXRJRWN5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF2M0ZpCkNQSDZXVFQzRzhrWW8vZUFTVmpwSW9NVHBzVWdRd0U3aFBIbWhVbWZKK3IyaEJ0T29MVGJjSmpITWdHeEJUNEgKVHU3MCtrOHZXVEFpNTZzWlZtdmlnQWY4OHhaMWdEbFJlK1g1TmJaMFRxbU5naFBrdGorcEE0UDZvcjZLRldwLwozZ3ZEdGhrVUJjcnF3NmdFbER0R2ZESU44d0JtSXNpTmFXMDJqQkVZdDlPeUhHQzBPUG9Dak03VDNVWUgzZ28rCjYxMTh5SHo3c0N0VHBKSmlhVkVsQldFYVJJR01MS2xEbGlQZnJEcUJtZzRweFJ5cDZWMGV0cDZlTUFvNXp2R0kKZ1B0TFhjd3k3SVZpUXlVMEFsWW5BWkcwTzNBcVAyNng2SnlJQVgyZjFQbmJVMjFnbmI4czUxaXJ1RjlHL003RQpHd004Q2V0Sk1WeHBSclBnUndJREFRQUJvNElCRnpDQ0FSTXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WCkhROEJBZjhFQkFNQ0FRWXdIUVlEVlIwT0JCWUVGRHFhaFFjUVp5aTI3L2E5QlVGdUlNR1UyZy9lTUI4R0ExVWQKSXdRWU1CYUFGTkxFc05LUjFFd1JjYk5oeXoyaC90Mm9hdFRqTURRR0NDc0dBUVVGQndFQkJDZ3dKakFrQmdncgpCZ0VGQlFjd0FZWVlhSFIwY0RvdkwyOWpjM0F1WjI5a1lXUmtlUzVqYjIwdk1ESUdBMVVkSHdRck1Da3dKNkFsCm9DT0dJV2gwZEhBNkx5OWpjbXd1WjI5a1lXUmtlUzVqYjIwdloyUnliMjkwTG1OeWJEQkdCZ05WSFNBRVB6QTkKTURzR0JGVWRJQUF3TXpBeEJnZ3JCZ0VGQlFjQ0FSWWxhSFIwY0hNNkx5OWpaWEowY3k1bmIyUmhaR1I1TG1OdgpiUzl5WlhCdmMybDBiM0o1THpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVdRdFR2WktHRWFja2UrMWJNYzhkCkgyeHd4Ymh1dms2NzlyNlhVT0V3Zjdvb1hHS1V3dU4rTS9mN1FuYUYyNVVjakNKWWRRa01pR1ZuT1FvV0NjV2cKT0pla3hTT1RQN1FZcGdFR1JKSGpwMmtudEZvbGZ6cTNNczNkaFA4cU9Da3pwTjFuc29YK29ZZ2dIRkNKeU53cQo5a0lETjB6bWlOL1ZyeVR5c2NQZnpMWHM0SmxldDBsVUlEeVVHQXpISEZJWVNhUnQ0Yk5ZQzhuWTdObXVIREtPCktIQU40djZtRjU2RUQ3MVhjTE5hNlIrZ2hsTzc3M3ovYVF2Z1NNTzNrd3ZJQ2xURXJGMFVaemRzeXFVdk1RZzMKcW01dmpMeWI0bGRkSklHdmw1ZWNoSzFzckRkTVp2TmhrUkVnNUw0d24zcWtLUW13NFRSZlpIY1lRRkhmakRDbQpydz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVBRENDQXVpZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRVUZBREJqTVFzd0NRWURWUVFHRXdKVlV6RWgKTUI4R0ExVUVDaE1ZVkdobElFZHZJRVJoWkdSNUlFZHliM1Z3TENCSmJtTXVNVEV3THdZRFZRUUxFeWhIYnlCRQpZV1JrZVNCRGJHRnpjeUF5SUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVNQjRYRFRBME1EWXlPVEUzCk1EWXlNRm9YRFRNME1EWXlPVEUzTURZeU1Gb3dZekVMTUFrR0ExVUVCaE1DVlZNeElUQWZCZ05WQkFvVEdGUm8KWlNCSGJ5QkVZV1JrZVNCSGNtOTFjQ3dnU1c1akxqRXhNQzhHQTFVRUN4TW9SMjhnUkdGa1pIa2dRMnhoYzNNZwpNaUJEWlhKMGFXWnBZMkYwYVc5dUlFRjFkR2h2Y21sMGVUQ0NBU0F3RFFZSktvWklodmNOQVFFQkJRQURnZ0VOCkFEQ0NBUWdDZ2dFQkFONmQxK3BYR0VtaFcrdlhYMGlHNnI3ZC8rVHZaeHowWldpelYzR2dYbmU3N1p0SjZYQ0EKUFZZWVl3aHYydkxNMEQ5L0FsUWlWQkRZc29IVXdIVTlTMy9IZDhNK2VLc2FBN1VnYXk5cUs3SEZpSDdFdXg2dwp3ZGhGSjIrcU4xajNoeWJYMkMzMnFSZTNIM0kyVHFZWFAyV1lrdHNxYmwyaS9vamdDOTUvNVkwVjRldkxPdFhpCkVxSVRMZGlPcjE4U1BhQUlCUWkyWEtWbE9BUkZtUjZqWUdCMHhVR2xjbUliWXNVZmIxOGFRcjRDVVdXb3JpTVkKYXZ4NEE2bE5mNEREK3F0YS9LRkFwTW9aRnY2eXlPOWVjdzN1ZDcyYTlubVl2TEVIWjZJVkRkMmdXTVpFZXdvKwpZaWhmdWtFSFUxalBFWDQ0ZE1YNC83VnBrSStFZE9xWEc2OENBUU9qZ2NBd2diMHdIUVlEVlIwT0JCWUVGTkxFCnNOS1IxRXdSY2JOaHl6MmgvdDJvYXRUak1JR05CZ05WSFNNRWdZVXdnWUtBRk5MRXNOS1IxRXdSY2JOaHl6MmgKL3Qyb2F0VGpvV2VrWlRCak1Rc3dDUVlEVlFRR0V3SlZVekVoTUI4R0ExVUVDaE1ZVkdobElFZHZJRVJoWkdSNQpJRWR5YjNWd0xDQkpibU11TVRFd0x3WURWUVFMRXloSGJ5QkVZV1JrZVNCRGJHRnpjeUF5SUVObGNuUnBabWxqCllYUnBiMjRnUVhWMGFHOXlhWFI1Z2dFQU1Bd0dBMVVkRXdRRk1BTUJBZjh3RFFZSktvWklodmNOQVFFRkJRQUQKZ2dFQkFESkw4N0xLUHBIOEVzYWhCNHlPZDZBekJoUmNrQjRZOXdpbVBRb1orWWVBRVc1cDVKWVhNUDgwa1dOeQpPTzdNSEFHakhaUW9wREgyZXNSVTEvYmxNVmdEb3N6T1l0dVVSWE8xdjBYSkpMWFZnZ0t0STNscGpiaTJUYzdQClRNb3pJK2djaUtxZGkwRnVGc2tnNVltZXpUdmFjUGQrbVNZZ0ZGUWxxMjV6aGVhYklaMEtiSUlPcVBqQ0RQb1EKSG15Vzc0Y054QTloaTYzdWd5dVYrSTZTaEhJNTZ5RHFnKzJEelpkdUNMenJUaWEyY3l2azAvWk0vaVp4NG1FUgpkRXIvVnhxSEQzVklMczlSYVJlZ0FoSmhsZFhSUUxJUVRPN0VyQkJEcHFXZUN0V1ZZcG9OejRpQ3hUSU01Q3VmClJlWU5ueWljc2JrcVdsZXROdyt2SFgvYnZaOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='
EMBEDDED_MGMT_CA_CERT_SIG=''
EMBEDDED_BLADE_MASK='200768'
EMBEDDED_CONFIG_DAT=''
# <<REPLACE END
ARCH=$(uname -m)

# function to check if embedded argument contains a non-placeholder value
function is_valid_embedded_arg() {
  local ext_arg=$1
  [[ ! $1 =~ ^__CP.*__$ ]]
}

function is_suse() {
  [[ $g_distro_name == "leap" || $g_distro_name == "sles" ]]
}

# apply valid embedded arguments
function apply_embedded_arguments() {
  if is_valid_embedded_arg "$EMBEDDED_MGMT_FQDN"; then SBA_MANAGEMENT_URL="https://${EMBEDDED_MGMT_FQDN}"; fi
  if is_valid_embedded_arg "$EMBEDDED_MGMT_KEY"; then SBA_MANAGEMENT_KEY=$EMBEDDED_MGMT_KEY; fi
  if is_valid_embedded_arg "$EMBEDDED_MGMT_CA_CERT"; then g_mgmt_ca_cert_data_base64=$EMBEDDED_MGMT_CA_CERT; fi
  if is_valid_embedded_arg "$EMBEDDED_MGMT_CA_CERT_SIG"; then g_mgmt_ca_cert_sig_data_base64=$EMBEDDED_MGMT_CA_CERT_SIG; fi
  if is_valid_embedded_arg "$EMBEDDED_BLADE_MASK"; then set_install_products_from_blade_mask $EMBEDDED_BLADE_MASK; fi
  if is_valid_embedded_arg "$EMBEDDED_CONFIG_DAT"; then g_da_config_dat_content=$EMBEDDED_CONFIG_DAT; SBA_CONFIG_DAT_FILE=$g_da_config_dat_file; fi
}

# write log rotate file for a given log
function logrotate_log_file() {
  local logrotate_base_path=$1
  local logrotate_file_path=$2
  local log_path=$3

  if [[ -d $logrotate_base_path ]]; then
    echo "${log_path} {" >$logrotate_file_path
    echo "  size 10M" >>$logrotate_file_path
    echo "  rotate 5" >>$logrotate_file_path
    echo "}" >>$logrotate_file_path
  fi
}

# write environment file to be used by cron jobs and possibly product services
function write_env_file() {
  mkdir -p $g_save_folder
  : >$g_env_file
  set +u
  echo "DEBIAN_FRONTEND=noninteractive" >>$g_env_file
  echo "SBA_REPO_TYPE=$SBA_REPO_TYPE" >>$g_env_file
  echo "PATH=$PATH" >>$g_env_file
  echo "HTTP_PROXY=$HTTP_PROXY" >>$g_env_file
  echo "http_proxy=$http_proxy" >>$g_env_file
  echo "HTTPS_PROXY=$HTTPS_PROXY" >>$g_env_file
  echo "https_proxy=$https_proxy" >>$g_env_file
  echo "NO_PROXY=$NO_PROXY" >>$g_env_file
  echo "no_proxy=$no_proxy" >>$g_env_file
  echo "SBA_ENABLE_EFR=$SBA_ENABLE_EFR" >>$g_env_file
  set -u
}

# update a single variable in the environment file
function update_env_file() {
  local key=$1
  local value=$2
  if [[ $2 == "none" ]]; then
    value=""
  fi
  if [[ -f /etc/checkpoint/cpla/env ]]; then
    sed -i "s|^\($key=\).*|\1$value|i" /etc/checkpoint/cpla/env
  fi
}

# remove environment file if no products are installed
function remove_env_file() {
  find_installed_products
  if ((${#g_installed_products[@]} == 0)); then
    rm -f $g_env_file
    set +e
    rm -df $g_save_folder
    set -e
  fi
}

# manually clean the garbage
function remove_leftovers() {
  # clamav traces
  rm -rfv "/etc/clam.d"
  rm -rfv "/usr/share/clamav"

  # configuration
  rm -rf "/etc/checkpoint/common"

  local explicit_files=(
    "/var/cache/checkpoint/cpmgmt/logcache.cache"
    "/var/lib/checkpoint/cpmgmt/telemetry_msgs_sent.json"
    "/var/lib/checkpoint/da/config.dat"
    "/var/cache/checkpoint/cpsba/bg/linux_rules_version"
    "/var/lib/checkpoint/cpam/cpam-status.json"
    "/var/lib/checkpoint/cpam/infections.json"
    "/var/lib/checkpoint/cpam/status.json"
    "/var/lib/checkpoint/cpam/te.yar"
    "/var/lib/checkpoint/cpam/mitre_db.yaml"
    "/var/lib/checkpoint/cpam/sophos"  # dir with am signatures
    "${g_install_log_file}"
    "${g_update_log_file}"
    "${g_switch_repo_log_file}"
    "${g_ar_injected_flag}"
    "${g_efr_injected_flag}"
  )

  for f in "${explicit_files[@]}" ; do
    rm -rf "$f" && echo "$f removed"
  done

  local explicit_dirs=(
    "/var/cache/checkpoint/cpsba/bg"
    "/var/cache/checkpoint/cpsba"
    "/var/cache/checkpoint/cpmgmt"
    "/var/cache/checkpoint"
    "/var/lib/checkpoint/cpam"
    "/var/lib/checkpoint/cpmgmt"
    "/var/lib/checkpoint/da"
    "/var/lib/checkpoint"
    "/var/log/checkpoint/cpam"
    "/var/log/checkpoint/common"
    "/var/log/checkpoint"
    "/etc/checkpoint"
  )
  for d in "${explicit_dirs[@]}" ; do
    rmdir "$d" && echo "Empty $d dir is removed"
  done
}

function setup_sophos() {
  local cpam_dir="/var/lib/checkpoint/cpam"
  rm -rf "$cpam_dir"
  mkdir -pv "$cpam_dir"
  mv "$g_bootstrap_dir/sophos" "$cpam_dir"
}

# offline_package: extract self contained archive from install_offline.sh to mktemp
function unpack_bootstrap() {
  echo "unpack_bootstrap started for $0"
  if ! grep -m 1 "^__ARCHIVE_FOLLOWS__" "$0" ; then
    echo "Error: this offline package does not seem to have embedded archive"
    echo "Please ensure, that you're using correct package (install_offline.sh)"
    exit 1
  fi
  awk 'f; /^__ARCHIVE_FOLLOWS__/{f=1}' "$0" | base64 -d | tar -C "$g_bootstrap_dir" -xz
  echo "unpack_bootstrap finished"
  echo "ls $g_bootstrap_dir"
  ls -la "$g_bootstrap_dir"
}

function prepare_offline_package() {
  g_bootstrap_dir="$(mktemp -d)"
  unpack_bootstrap
  mkdir -p "$g_offline_repo_path"
  cp -Rafv "$g_bootstrap_dir/$g_package_type/"* "$g_offline_repo_path"
}

function ensure_bootstrap_dir_removed() {
  [ -n "$g_bootstrap_dir" ] && echo "g_bootstrap_dir: $g_bootstrap_dir"
  if [ -n "$SBA_OFFLINE_PACKAGE" ] && [ -d "$g_bootstrap_dir" ] ; then
    echo "cleaning temp offline_package dir"
    rm -rf "$g_bootstrap_dir"
  fi
}

function ensure_upgrade_conf_dir_removed() {
  [ -n "$g_upgrade_conf_dir" ] && echo "g_upgrade_conf_dir: $g_upgrade_conf_dir"
  if [ -d "$g_upgrade_conf_dir" ] ; then
    echo "cleaning temp upgrade config dir"
    rm -rf "$g_upgrade_conf_dir"
  fi
}

# schedule cron job that will retry to install if previous attempt failed
function schedule_install_cron_job() {
  if [[ $g_install_with_cron_job == "no" || -f $g_cron_file_reinstall_path ]]; then
    return
  fi

  save_self

  local logrotate_base_path="/etc/logrotate.d"
  local logrotate_file_path="${logrotate_base_path}/sbalinux-install"
  local log_path="${g_install_log_file}"
  local cron_job_install_script="$g_save_folder/install_cronjob.sh"

  local env_vars_exports="set -o allexport; source $g_env_file; set +o allexport"
  local echo_log_cmd="echo \"--- starting install: \$(date) ---\""
  local last_install_command="${g_saved_script} ${g_args}"

  mkdir -p "$g_log_base_path"

  : >$cron_job_install_script
  chmod 744 $cron_job_install_script
  echo '#!/bin/bash' >>$cron_job_install_script
  echo $env_vars_exports >>$cron_job_install_script
  echo $echo_log_cmd >>$cron_job_install_script
  echo $last_install_command >>$cron_job_install_script
  echo "$g_install_cron_timing  root  $cron_job_install_script >> ${log_path} 2>&1" >>$g_cron_file_reinstall_path

  logrotate_log_file "$logrotate_base_path" "$logrotate_file_path" "$log_path"
}

# remove install retry cron job, should be called after installation success
function remove_install_cron_job() {
  local logrotate_base_path="/etc/logrotate.d"
  local logrotate_file_path="${logrotate_base_path}/sbalinux-install"
  local cron_job_install_script="$g_save_folder/install_cronjob.sh"

  if [[ $g_install_with_cron_job == "no" ]]; then
    return
  fi

  # clean-up any additional cron job related files
  remove_self
  rm -f $g_cron_file_reinstall_path
  rm -f $g_cron_file_switch_repo_path
  rm -f $logrotate_file_path
  rm -f $cron_job_install_script
  set +e
  rm -df $g_save_folder
  set -e
}

function is_http_url() {
  if [[ $1 =~ ^http(s{0,1}):\/\/.*$ ]]; then
    echo "true"
  fi
}

function is_guid() {
  if [[ $1 =~ ^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$ ]]; then
    echo "true"
  fi
}

function is_sysdig_needed() {
  local blades
  if [ "$g_operation" == "install" ]; then
    blades="$g_remote_install_products"
  elif [ "$g_operation" == "update" ]; then
    blades="$g_update_product"
  fi

  [[ "$blades" = *"bg"* || "$blades" = *"edr"* ]]
}

function is_ubuntu_22() {
  [[ ($g_distro_name == "ubuntu" && $g_distro_version -eq 22) ]]
}

function check_offline_package() {
  if grep -q -m 1 "^__ARCHIVE_FOLLOWS__" "$0" ; then
    export SBA_OFFLINE_PACKAGE=yes
  fi
}

function check_install_cmd_args() {
  if [[ -z $SBA_MANAGEMENT_URL ]]; then
    echo "Missing management server configuration, for usage run: $0 --help"
    exit 1
  fi

  # accept base64 encoded key
  if [[ ! $SBA_MANAGEMENT_KEY =~ ^[A-Za-z0-9+/=]*$ ]]; then
    echo "Illegal management server key"
    exit 1
  fi

  # Validation of URL is not strict. The possible one to cover domain name and IPv4 address is:
  # ^https?:\/\/(((?!-)[A-Za-z0-9-]{1,63}(?<!-)\.)+[A-Za-z]{2,6}|([0-9]{1,3}\.){3}[0-9]{1,3}(:[0-9]+)?)$
  if [[ ! $SBA_MANAGEMENT_URL =~ ^https?:\/\/ ]]; then
    echo "Illegal management server url $SBA_MANAGEMENT_URL. It should be in form http(s)://<IP|hostname>"
    exit 1
  fi

  if [[ ! -z $HTTP_PROXY && -z $(is_http_url $HTTP_PROXY) ]]; then
    echo "Illegal http proxy url"
    exit 1
  fi

  if [[ ! -z $HTTPS_PROXY && -z $(is_http_url $HTTPS_PROXY) ]]; then
    echo "Illegal https proxy url"
    exit 1
  fi

  if [[ -z $g_install_source ]]; then
    echo "Missing install source, for usage run: $0 --help"
    exit 1
  fi

  if [[ $g_install_source == "remote" ]]; then
    if [[ -z $g_remote_install_products ]]; then
      echo "Please specify product to install from the remote package repository"
      exit 1
    fi
    if [[ ! -z $g_local_install_file_name ]]; then
      echo "Package file name cannot be specified when installing from remote package repository"
      exit 1
    fi
  elif [[ $g_install_source == "local" ]]; then
    if [[ -z $g_local_install_file_name ]]; then
      echo "Please specify package file name to install"
      exit 1
    fi
  fi

  if [[ ! -z $g_version_to_install ]]; then
    if [[ $g_install_source != "remote" ]]; then
      echo "Version to install can only be specified for installation from a remote repository"
      exit 1
    fi
    if [[ ! $g_version_to_install =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      echo "Version to install is invalid"
      exit 1
    fi
  fi

  if [[ ! -z $g_install_with_cron_job ]]; then
    if [[ $g_install_with_cron_job != "yes" && $g_install_with_cron_job != "no" ]]; then
      echo "Invalid argument for 'retry' option, please specify 'yes' or 'no'"
      exit 1
    fi
  fi

  if [[ ! -z $g_should_schedule_upgrade ]]; then
    if [[ $g_should_schedule_upgrade != "yes" && $g_should_schedule_upgrade != "no" ]]; then
      echo "Invalid argument for 'upgrade' option, please specify 'yes' or 'no'"
      exit 1
    fi
  fi

  if [[ ! -z $SBA_VDS_LOCATION_GUID && -z $(is_guid $SBA_VDS_LOCATION_GUID) ]]; then
    echo "Illegal group id. Group id should be in GUID format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
    exit 1
  fi
}

function check_umask() {
  local um
  um=$(umask)
  local supported_umask="0022"
  if [[ $(umask) != "0022" ]] ; then
    echo "Error!"
    echo "Installation script has detected an umask: \"${um}\"."
    echo "Only ${supported_umask} is supported. Other variants might lead to"
    echo "unpredictable behavior when working as an unprivileged"
    echo "user. Refused to proceed."
    exit 1
  fi
}

function force_env_vars() {
  if [ "$g_distro_name" == "debian" ] && [ "$g_distro_version" -eq 11 ]; then
    export USE_CPCLAM=false
  fi
}

function to_lower() {
  echo "$1" | tr "[:upper:]" "[:lower:]"
}

function ensure_forced_distro(){
  OLD_IFS=$IFS
  IFS='_'
  read -ra distro <<< "$SBA_FORCE_DISTRO"
  g_distro_name=$(to_lower "${distro[0]}")
  g_distro_version=${distro[1]}
  echo "Forced to use $g_distro_name $g_distro_version distribution"
  IFS=$OLD_IFS
}

function detect_package_type() {
  # check architecture
  if [[ ! $ARCH == "x86_64" && ! $ARCH == "aarch64" ]]; then
    return
  fi

  if [[ ! -z ${SBA_FORCE_DISTRO:=""} ]]; then
    ensure_forced_distro
  else
    # check distro
    if [[ -f "/etc/debian_version" ]]; then  # debian-based distros
      if [[ ! $ARCH == "x86_64" ]]; then
        return
      fi

      if [[ -f "/etc/lsb-release" ]]; then
        . "/etc/lsb-release"
        g_distro_name=$(echo "$DISTRIB_ID" | tr '[:upper:]' '[:lower:]')
        g_distro_version=${DISTRIB_RELEASE%%.*}
      else
        g_distro_name="debian"
        g_distro_version=$(cut -d'.' -f1 "/etc/debian_version")
      fi
    elif [ -f "/etc/system-release-cpe" ]; then  # centos-based distros
      g_distro_name=$(cut -d':' -f3 "/etc/system-release-cpe")
      g_distro_version=$(cut -d':' -f5 "/etc/system-release-cpe" | cut -d'.' -f1 | sed 's/[^0-9]*//g')
      if [[ $g_distro_name == "o" ]]; then
        g_distro_name=$(cut -d':' -f4 "/etc/system-release-cpe")
        g_distro_version=$(cut -d':' -f6 "/etc/system-release-cpe")
      elif [[ $g_distro_name == "euler" ]]; then
        g_distro_version=$(cut -d':' -f5 "/etc/system-release-cpe" | sed 's/[^0-9]*//g')
      elif [[ $g_distro_name == "fedoraproject" ]]; then
        g_distro_name=$(cut -d':' -f4 "/etc/system-release-cpe")
      fi
    elif [ -f /etc/os-release ] ; then  # suse-based distros
      g_distro_name=$(grep -Po '(?<=^CPE_NAME=).*(?=)' "/etc/os-release" | cut -d ':' -f 4)
      g_distro_version="$(grep -Po '(?<=VERSION_ID=").*(?=")' "/etc/os-release" | tr -dc '0-9')"
    fi
  fi

  # debian-based distros
  if [[ ($g_distro_name == "ubuntu") \
     || ($g_distro_name == "debian" && $g_distro_version -ge 9  && $g_distro_version -le 11) ]]; then
    g_package_type="deb"
  fi

  # centos-based distros
  if [[ ($g_distro_name == "centos" && $g_distro_version -ge 7 && $g_distro_version -le 9) \
     || ($g_distro_name == "redhat" && $g_distro_version -ge 7 && $g_distro_version -le 9) \
     || ($g_distro_name == "oracle" && $g_distro_version -ge 7 && $g_distro_version -le 8) \
     || ($g_distro_name == "amazon" && $g_distro_version -eq 2) \
     || ($g_distro_name == "euler" && ($g_distro_version -eq 205 || $g_distro_version -eq 208 \
                                    || $g_distro_version -eq 209 || $g_distro_version -eq 2010)) \
     || ($g_distro_name == "almalinux" && $g_distro_version -ge 8 && $g_distro_version -le 9) \
     || ($g_distro_name == "fedora" && ($g_distro_version -ge 34 && $g_distro_version -le 39)) \
     ]]; then
      g_package_type="rpm"
      g_rpm_repo_config_file="/etc/yum.repos.d/sbalinux.repo"
  fi

  # suse-based distros
  if [[ ($g_distro_name == "leap" && ($g_distro_version -eq 423 || $g_distro_version -eq 153 \
                                   || $g_distro_version -eq 154 || $g_distro_version -eq 155)) \
     || ($g_distro_name == "sles" && ($g_distro_version -eq 125 || $g_distro_version -eq 153)) ]]; then
      g_package_type="rpm"
      g_rpm_repo_config_file="/etc/zypp/repos.d/sbalinux.repo"
  fi
}

function set_repo_type() {
  g_repo_type=${SBA_REPO_TYPE:=$g_repo_type}
}

function set_blades_from_products() {
  local products_str=$1

  # split into array with unique elements
  g_blades=($(echo $products_str | tr "," "\n" | sort -u | tr "\n" " "))

  if [[ ${#g_blades[@]} -eq 0 ]]; then
      if [[ $ARCH == "x86_64" ]]; then
        g_blades=("edr" "am" "ar")
        if [[ ! -z $SBA_ENABLE_EFR ]]; then
          g_blades+=("efr")
        fi
      else
        g_blades=("am" "ar")
      fi
  fi

  for product in ${g_blades[*]}; do
    if [[ -z ${g_prod_to_blade[$product]:=""} ]]; then
      echo "invalid product '$product'"
      exit 1
    fi
  done
}

function bypass_proxy() {
  if [ $# -eq 0 ]; then
    # No argument supplied. no_proxy remains unchanged
    return
  fi

  local fqdn=$1
  if [[ -z ${no_proxy:=""} ]]; then
    export no_proxy=$fqdn
  else
    export no_proxy="$no_proxy,$fqdn"
  fi
  if [[ -z ${NO_PROXY:=""} ]]; then
    export NO_PROXY=$fqdn
  else
    export NO_PROXY="$NO_PROXY,$fqdn"
  fi
}

function configure_deb_offline_repo() {
  echo "Importing sbalinux key..."
  apt-key add - < "$g_bootstrap_dir/pks/public"

  # configure /etc/apt/sources.list.d/sbalinux_offline
  local config_file=$g_deb_repo_config_file
  local repo_name=sbalinux_offline
  echo "deb [trusted=yes] file://$g_offline_repo_path ./" >$config_file
}

# configure sbalinux deb repo
function configure_deb_repo() {
  if [ -n "$SBA_OFFLINE_PACKAGE" ] ; then
    configure_deb_offline_repo
    return
  fi
  local repo_type=$1
  local config_file=$g_deb_repo_config_file

  if [[ $repo_type == "prod" || $repo_type == "stg" ]]; then
    local repo_fqdn=$g_secureupdates_fqdn
    local key_url="https://${repo_fqdn}/sbalinux/sbalinux-gpg-key.public"
    local repo_url="https://${repo_fqdn}/sbalinux/packages/deb"
  elif [[ $repo_type == "dev"  ]]; then
    local repo_fqdn=$g_artifactory_fqdn
    local key_url="https://${repo_fqdn}/artifactory/api/gpg/key/public"
    local repo_url="https://${repo_fqdn}/artifactory/SBA_DEB"
    # add proxy bypass for artifactory
    bypass_proxy ${repo_fqdn}
  else
    echo "invalid repository type: $repo_type"
    exit 1
  fi

  mkdir -p "$(dirname "$config_file")"
  curl -s $key_url | apt-key add -
  echo "deb [arch=amd64] ${repo_url} ${repo_type} ${g_universal_repo}" >$config_file
}

function configure_rpm_offline_repo() {
  echo "Importing sbalinux key..."
  rpm --import "$g_bootstrap_dir/pks/sbalinux-gpg-key.asc"

  local config_file=$g_rpm_repo_config_file
  local repo_name=sbalinux_offline
  {
    echo "[${repo_name}]"
    echo "name=${repo_name}"
    echo "baseurl=file://$g_offline_repo_path"
    echo "enabled=1"
    echo "gpgcheck=1"
    echo "sslverify=1"
    echo "priority=5"
  } > "$config_file"
}

# configure sbalinux rpm repo
function configure_rpm_repo() {
  if [ -n "$SBA_OFFLINE_PACKAGE" ] ; then
    configure_rpm_offline_repo
    return
  fi
  local repo_type=$1
  local config_file=$g_rpm_repo_config_file
  local repo_name="sbalinux_${repo_type}"
  # Leave pure sbalinux only for prod
  [[ $repo_type == "prod" ]] && repo_name="sbalinux"
  if [[ $repo_type == "prod" || $repo_type == "stg" ]]; then
    local repo_fqdn=$g_secureupdates_fqdn
    local repo_url="https://${repo_fqdn}/sbalinux/packages/rpm"
    local key_url="https://${repo_fqdn}/sbalinux/sbalinux-gpg-key.asc"
    local gpgcheck=1
    local sslverify=1
    local disable_proxy=0
  elif [[ $repo_type == "dev" ]]; then
    local repo_fqdn=$g_artifactory_fqdn
    local repo_url="https://${repo_fqdn}/artifactory/SBA_RPM"
    local key_url="https://${repo_fqdn}/artifactory/SBA_GEN/repo_public_keys/rpm/sbalinux-gpg-key.asc"
    local gpgcheck=0
    local sslverify=0
    local disable_proxy=1
    # add proxy bypass for artifactory
    bypass_proxy $repo_fqdn
  else
    echo "invalid repository type: $repo_type"
    exit 1
  fi

  rpm --import $key_url
  echo "[${repo_name}]" >$config_file
  echo "name=${repo_name}" >>$config_file
  echo "baseurl=${repo_url}/${repo_type}/${g_universal_repo}" >>$config_file
  echo "enabled=1" >>$config_file
  echo "gpgcheck=${gpgcheck}" >>$config_file
  echo "sslverify=${sslverify}" >>$config_file

  # pin repo priority becuase we want some dependencies to be hosted on our own repo
  # NOTE: to make repo priority work in centos/redhat older than 8 we need to install the yum-priorities plugin!
  echo "priority=1" >>$config_file

  if [[ $disable_proxy -gt 0 ]]; then
    echo "proxy=_none_" >>$config_file
  fi

  # refresh zypper for gpg key auto trust
  if is_suse ; then
    zypper --gpg-auto-import-keys refresh
  fi
  
  if ! is_suse ; then
    yum clean all  --disablerepo="*"  --enablerepo="sbalinux*"
  fi
}

function remove_deb_repo() {
  find_installed_products
  if ((${#g_installed_products[@]} == 0)); then
    rm -f $g_deb_repo_config_file
  fi
}

function remove_rpm_repo() {
  find_installed_products
  if ((${#g_installed_products[@]} == 0)); then
    rm -f $g_rpm_repo_config_file
  fi
}

function install_kernel_headers() {
  local kernel_version
  kernel_version=$(uname -r)

  if [[ $g_package_type == "deb" ]]; then
    apt-get install -y "linux-headers-$kernel_version"
    return
  fi

  if is_suse ; then
    zypper in -y "kernel-default-devel=$(echo "$kernel_version" | sed "s/-default//")"
    return
  fi

  if [[ $g_package_type == "rpm" ]]; then
      if [[ $kernel_version == *uek* ]]; then
        yum -q -y install "kernel-uek-devel-$kernel_version" || kernel_warning
      else
        yum -q -y install "kernel-devel-$kernel_version" || kernel_warning
      fi
  fi
}

function install_prereq_offline() {
    setup_sophos

    if is_sysdig_needed ; then
      install_kernel_headers || true
    fi
}

function install_prereq_apt() {
  if [ -n "$SBA_OFFLINE_PACKAGE" ] ; then
    install_prereq_offline
    return
  fi

  # preconfigure samba-common to prevent it from popping a dialog requiring user input
  echo "samba-common samba-common/dhcp boolean false" | debconf-set-selections

  # common
  apt-get update
  apt-get install -y curl gnupg apt-transport-https

  if is_ubuntu_22 ; then
    apt-get install -y glibc-tools
  fi

  if is_sysdig_needed; then
    install_kernel_headers || kernel_warning
  fi
}

function install_prereq_zypper() {
  if [ -n "$SBA_OFFLINE_PACKAGE" ] ; then
    install_prereq_offline
    return
  fi

  if is_sysdig_needed; then
    install_kernel_headers || kernel_warning
  fi
}

function install_prereq_yum() {
  if [ -n "$SBA_OFFLINE_PACKAGE" ] ; then
    install_prereq_offline
    return
  fi

  if is_sysdig_needed && [[ $ARCH == "x86_64" && ($g_distro_name != "euler") ]]; then
    install_kernel_headers || kernel_warning
  fi
}

function kernel_warning() {
  echo "Unable to find kernel development files for the current kernel version $(uname -r)"
  echo "This usually means that your system is not up-to-date or you installed a custom kernel version."
  echo "Please install up-to-date kernel or reboot system to load different installed one"
  exit 2
}

function get_deb_install_candidate() {
  local pkg_name=$1
  local result=$(apt-cache policy $pkg_name | grep 'Candidate:' | sed -r 's/^\s+Candidate:\s+//')
  echo $result
}

function install_deb_pkg_from_file() {
  BASEDIR=$(dirname "$0")
  local pkg_file=$BASEDIR/$1

  apt-get update
  apt-get install -y $pkg_file
}

function install_rpm_pkg_from_file() {
  local pkg_file=$1
  BASEDIR=$(dirname "$0")
  if ! is_suse ; then
    yum install -y $BASEDIR/$pkg_file
  else
    zypper -n in $BASEDIR/$pkg_file
  fi
}

function get_deb_version_to_install() {
  local pkg_name=$1
  local version
  if [[ -z $g_version_to_install ]]; then
    version=$(get_deb_install_candidate "$pkg_name")
  else
    version=$g_version_to_install
  fi
  echo "$version"
}

function install_deb_pkg_from_repo() {
  apt-get update
  local pkg_name=${g_pkg_name}
  local version=$(get_deb_version_to_install "$pkg_name")
  apt-get install -y $pkg_name=$version
}

function install_rpm_pkg_from_repo() {
  if [[ -z $g_version_to_install ]]; then
    if ! is_suse ; then
      yum install -y ${g_pkg_name}
    else
      zypper -n --gpg-auto-import-keys in ${g_pkg_name}
    fi
  else
    local pkg_name=${g_pkg_name}-${g_version_to_install}
    if ! is_suse ; then
      yum install -y "$pkg_name"
    else
      zypper -n in -f "$pkg_name"
    fi
  fi
}

function uninstall_deb_pkg() {
  local pkg_to_remove
  if is_deb_pkg_installed "$g_old_pkg_name"; then
    pkg_to_remove="$g_old_pkg_name"
  else
    pkg_to_remove="$g_pkg_name"
  fi

  apt-get purge --autoremove -y ${pkg_to_remove}
}

function uninstall_rpm_pkg() {
  local pkg_to_remove
  if is_rpm_pkg_installed "$g_old_pkg_name"; then
    pkg_to_remove="$g_old_pkg_name"
  else
    pkg_to_remove="$g_pkg_name"
  fi

  if ! is_suse ; then
    yum autoremove -y "$pkg_to_remove"
  else
    zypper -n rm "$pkg_to_remove"
  fi
}

function find_installed_products() {
  g_installed_products=()

  local pkg=${g_pkg_name}
  if [[ $g_package_type == "deb" ]]; then
    if is_deb_pkg_installed "$pkg"; then
      g_installed_products+=("la")
    fi
  elif [[ $g_package_type == "rpm" ]]; then
    if is_rpm_pkg_installed "$pkg"; then
      g_installed_products+=("la")
    fi
  fi
}

function get_script_update_url() {
  if [[ $g_repo_type == "dev" ]]; then
    echo "https://${g_artifactory_fqdn}/artifactory/SBA_GEN/dev/scripts/install.update"
  elif [[ $g_repo_type == "stg" ]]; then
    echo "https://${g_secureupdates_fqdn}/sbalinux/packages/generic/stg/scripts/install.template"
  elif [[ $g_repo_type == "prod" ]]; then
    echo "https://${g_secureupdates_fqdn}/sbalinux/scripts/install.update"
  fi
}

# schedule or remove cron job for product version update
# this function will schedule or remove the update cronjob based on installed products
function schedule_or_remove_update_cron_job() {
  if [[ $g_should_schedule_upgrade == "no" ]]; then
    return
  fi

  local log_path="${g_update_log_file}"
  local cron_file_path="/etc/cron.d/sbalinux-update"
  local logrotate_base_path="/etc/logrotate.d"
  local logrotate_file_path="${logrotate_base_path}/sbalinux-update"
  local cron_job_update_script="$g_save_folder/update_cronjob.sh"

  find_installed_products

  if ((${#g_installed_products[@]} > 0)); then
    save_self
    mkdir -p "$g_log_base_path"
    : >$cron_file_path
    local script_update_url=$(get_script_update_url)

    [[ -z $script_update_url ]] && echo "invalid script update url, cannot setup update cron job" && exit 1
    local script_update_tmp_file="/tmp/sbalinux-install-update.tmp"

    local lock_cmd='[ "${SBA_FLOCKER}" != "$0" ] && exec env SBA_FLOCKER="$0" flock -E 254 -en "/tmp/sbalinux-update-job.lock" "$0" "$@" || :'
    local env_vars_exports="set -o allexport; source $g_env_file; set +o allexport"
    local echo_log_cmd="echo \"--- starting update: \$(date) ---\""

    echo "schedule cronjob"
    if [[ $g_package_type == "deb" ]]; then
      local script_update_cmd="apt-get update; apt-get install -y ${g_installer_package_name}"
    elif is_suse ; then
      local script_update_cmd="zypper -n in ${g_installer_package_name}"
    elif [[ $g_package_type == "rpm" ]]; then
      local script_update_cmd="yum install -y ${g_installer_package_name}"
    fi
    echo "after schedule cronjob"
    local satellite=""
    if [[ -n "$g_force_no_sbalinux_repo" ]] ; then
      satellite="--satellite yes"
    fi

    local product_update_cmd="${g_saved_script} update $satellite"
    if [[ "$g_got_remote_install_product_arg" == 1 ]] ; then
      product_update_cmd+=" --product $g_remote_install_products"
    elif [[ ! -z "$g_update_product" && "$g_update_product" != "$g_default_blades_set" ]] ; then
      product_update_cmd+=" --product $g_update_product"
    fi

    : >$cron_job_update_script
    chmod 744 $cron_job_update_script
    echo '#!/bin/bash' >>$cron_job_update_script
    echo $lock_cmd >>$cron_job_update_script
    echo $env_vars_exports >>$cron_job_update_script
    echo $echo_log_cmd >>$cron_job_update_script
    echo $script_update_cmd >>$cron_job_update_script
    echo $product_update_cmd >>$cron_job_update_script

    echo "$g_update_cron_timing  root  $cron_job_update_script >> ${log_path} 2>&1" >>$cron_file_path

    logrotate_log_file "$logrotate_base_path" "$logrotate_file_path" "$log_path"
  else
    # remove installer package
    set +e
    if [[ $g_package_type == "deb" ]]; then
      apt-get purge -y ${g_installer_package_name}
    elif is_suse ; then
      zypper -n rm ${g_installer_package_name}
    elif [[ $g_package_type == "rpm" ]]; then
      yum autoremove -y ${g_installer_package_name}
    fi
    set -e

    # clean-up any additional cron job related files
    [ "$g_switching_repo" -eq 0 ] && remove_self
    rm -f $cron_file_path
    rm -f $logrotate_file_path
    rm -f $cron_job_update_script
    rm -f $g_cron_file_switch_repo_path
    set +e
    rm -df $g_save_folder
    set -e
  fi
}

# save copy of this script for invokation from cron jobs
function save_self() {
  mkdir -p $g_save_folder
  if [[ "$0" != "$g_saved_script" ]]; then
    cp -f "$0" $g_saved_script
    chmod 744 $g_saved_script
  fi
}

# remove the saved copy of this script
function remove_self() {
  if [[ -f $g_saved_script ]]; then
    rm -f $g_saved_script
  fi
}

function do_remote_install() {
  set_repo_type
  set_blades_from_products $g_remote_install_products

  write_env_file
  schedule_install_cron_job $g_args
  store_config_dat_file
  write_ca_cert_and_sig
  if [[ $g_package_type == "deb" ]]; then
    install_prereq_apt
    [[ -z "$g_force_no_sbalinux_repo" ]] && configure_deb_repo $g_repo_type
    install_deb_pkg_from_repo
  elif [[ $g_package_type == "rpm" ]]; then
    if ! is_suse ; then
      install_prereq_yum
    else
      install_prereq_zypper
    fi
    [[ -z "$g_force_no_sbalinux_repo" ]] && configure_rpm_repo $g_repo_type
    install_rpm_pkg_from_repo
  fi

  remove_install_cron_job
  if [ ! -n "$SBA_OFFLINE_PACKAGE" ] ; then
    schedule_or_remove_update_cron_job
  fi
}

function do_file_install() {
  pkg_file=$g_local_install_file_name
  if [[ -f $pkg_file ]]; then
    set_repo_type
    set_blades_from_products $g_remote_install_products
    write_env_file
    schedule_install_cron_job $g_args
    store_config_dat_file
    write_ca_cert_and_sig
    if [[ $g_package_type == "deb" ]]; then
      install_prereq_apt
      [[ -z "$g_force_no_sbalinux_repo" ]] && configure_deb_repo $g_repo_type
      install_deb_pkg_from_file $pkg_file
    elif [[ $g_package_type == "rpm" ]]; then
      if ! is_suse ; then
        install_prereq_yum
      else
        install_prereq_zypper
      fi
      [[ -z "$g_force_no_sbalinux_repo" ]] && configure_rpm_repo $g_repo_type
      install_rpm_pkg_from_file $pkg_file
    fi
    remove_install_cron_job
  else
    echo "cannot find package file ${pkg_file}"
    exit 1
  fi
}

function ensure_offline_repo_dir_removed() {
  if [ -d "$g_offline_repo_path" ]; then
    echo "removing offline repo dir: $g_offline_repo_path"
    rm -rf "$g_offline_repo_path"
  fi
}

function do_uninstall() {
  set_blades_from_products "$g_uninstall_product"

  echo "deleting all blades dependencies of Linux Agent"
  set +e
  stop_service "cpla"
  if [ "$g_switching_repo" -eq 0 ]; then
    $g_cpla_path uninstall_all
  else
    $g_cpla_path uninstall_all --skip-notification
  fi
  set -e

  if [[ $g_package_type == "deb" ]]; then
    uninstall_deb_pkg
    [[ -z "$g_force_no_sbalinux_repo" ]] && remove_deb_repo
  elif [[ $g_package_type == "rpm" ]]; then
    uninstall_rpm_pkg
    [[ -z "$g_force_no_sbalinux_repo" ]] && remove_rpm_repo
  fi

  ensure_offline_repo_dir_removed

  schedule_or_remove_update_cron_job

  if [ "$g_switching_repo" -eq 0 ]; then
    remove_ca_cert_and_sig
    remove_env_file
    remove_leftovers
  fi
}

function check_config_cmd_args() {
  if [[ $num_of_config_args == 0 ]]; then
    echo "Please enter at least one argument to config"
    exit 1
  fi

  # accept base64 encoded key
  if [[ ! $SBA_MANAGEMENT_KEY =~ ^[A-Za-z0-9+/=]*$ ]]; then
    echo "Illegal management server key"
    exit 1
  fi

  if [[ ! -z $SBA_MANAGEMENT_URL && ! $SBA_MANAGEMENT_URL =~ ^https?:\/\/ ]]; then
    echo "Illegal management server url $SBA_MANAGEMENT_URL"
    exit 1
  fi

  if [[ ! -z $HTTP_PROXY && -z $(is_http_url $HTTP_PROXY) && ! $HTTP_PROXY == "none" ]]; then
    echo "Illegal http proxy url"
    exit 1
  fi

  if [[ ! -z $HTTPS_PROXY && -z $(is_http_url $HTTPS_PROXY) && ! $HTTPS_PROXY == "none" ]]; then
    echo "Illegal https proxy url"
    exit 1
  fi
}

# perform config operation
function do_config() {
  find_installed_products
  if ((${#g_installed_products[@]} == 0)); then
    echo "There is no installed product to config"
    exit 1
  fi

  local product="la"
  echo "Updating configuration for '$product':"

  if [[ ! -z $SBA_MANAGEMENT_KEY ]]; then
    update_env_file "SBA_MANAGEMENT_KEY" "$SBA_MANAGEMENT_KEY"
    echo "Updated management server key"
  fi

  if [[ ! -z $SBA_MANAGEMENT_URL ]]; then
    update_env_file "SBA_MANAGEMENT_URL" "$SBA_MANAGEMENT_URL"
    echo "Updated management server url"
  fi

  if [[ ! -z $SBA_ENABLE_BG ]]; then
    update_env_file "SBA_ENABLE_BG" "$SBA_ENABLE_BG"
    echo "Updated BG status"
  fi

  if [[ ! -z $SBA_ENABLE_EFR ]]; then
    update_env_file "SBA_ENABLE_EFR" "$SBA_ENABLE_EFR"
    echo "Updated EFR status"
  fi

  if [[ ! -z $SBA_CONFIG_DAT_FILE ]]; then
    update_env_file "SBA_CONFIG_DAT_FILE" "$SBA_CONFIG_DAT_FILE"
    echo "Updated config.dat file path"
  fi

  if [[ ! -z $HTTP_PROXY ]]; then
    update_env_file "HTTP_PROXY" "$HTTP_PROXY"
    update_env_file "http_proxy" "$HTTP_PROXY"
    echo "Updated http proxy"
  fi

  if [[ ! -z $HTTPS_PROXY ]]; then
    update_env_file "HTTPS_PROXY" "$HTTPS_PROXY"
    update_env_file "https_proxy" "$HTTPS_PROXY"
    echo "Updated https proxy"
  fi

  if [[ ! -z $NO_PROXY ]]; then
    update_env_file "NO_PROXY" "$NO_PROXY"
    update_env_file "no_proxy" "$NO_PROXY"
    echo "Updated proxy bypass list"
  fi

  if [[ ! -z $SBA_AUTH_PRINCIPAL ]]; then
    update_env_file "SBA_AUTH_PRINCIPAL" "$SBA_AUTH_PRINCIPAL"
    echo "Updated management authentication principal"
  fi

  if [[ ! -z $SBA_USE_DA ]]; then
    update_env_file "SBA_USE_DA" "$SBA_USE_DA"
    echo "Updated DA setting"
  fi

  if [[ ! -z $SBA_VDS_LOCATION_GUID ]]; then
    update_env_file "SBA_VDS_LOCATION_GUID" "$SBA_VDS_LOCATION_GUID"
    echo "Updated VDS id"
  fi

  if [[ ! -z $USE_CPCLAM ]]; then
    update_env_file "USE_CPCLAM" "$USE_CPCLAM"
    echo "Updated CPCLAM repo"
  fi

  if [[ ! -z $SBA_MITRE ]]; then
    update_env_file "SBA_MITRE" "$SBA_MITRE"
    echo "Updated Mitre flag"
  fi

  if [[ ! -z $SBA_AR_FORCE_DETECT ]]; then
    update_env_file "SBA_AR_FORCE_DETECT" "$SBA_AR_FORCE_DETECT"
    echo "Updated ar force detect flag"
  fi

  if [[ ! -z $SBA_OFFLINE_PACKAGE ]]; then
    update_env_file "SBA_OFFLINE_PACKAGE" "$SBA_OFFLINE_PACKAGE"
    echo "Update LA offline package flag"
  fi

  if [[ ! -z $SBA_PRODUCT_UPDATE_DELAY_MIN ]]; then
    update_env_file "SBA_PRODUCT_UPDATE_DELAY_MIN" "$SBA_PRODUCT_UPDATE_DELAY_MIN"
    echo "Updated product update delay flag"
  fi

  if [[ ! -z $SBA_DISABLE_TH_ALERTS ]]; then
    update_env_file "SBA_DISABLE_TH_ALERTS" "$SBA_DISABLE_TH_ALERTS"
    echo "Updated TH alerts flag"
  fi

  if [[ ! -z $SBA_ONACCESS_EVERYTHING ]]; then
    update_env_file "SBA_ONACCESS_EVERYTHING" "$SBA_ONACCESS_EVERYTHING"
    echo "Updated onaccess scan root property"
  fi

  if [[ ! -z $SBA_DEPLPOL_UPDATE_CRON_TIMING ]]; then
    update_env_file "SBA_DEPLPOL_UPDATE_CRON_TIMING" "$SBA_DEPLPOL_UPDATE_CRON_TIMING"
    echo "Updated deployment policy cron update timing"
  fi

  if [[ ! -z $SBA_YARA ]]; then
    update_env_file "SBA_YARA" "$SBA_YARA"
    echo "Updated yara property"
  fi

  if [[ ! -z $SBA_EXPERIMENTAL_BG_RULES ]]; then
    update_env_file "SBA_EXPERIMENTAL_BG_RULES" "$SBA_EXPERIMENTAL_BG_RULES"
    echo "Updated bg experimental rules property"
  fi
}

# placeholder function for a custom action to be performed during update
function update_custom_action() {
  # if env file is missing during update write it according to the current environment
  # this is needed if upgrading from script version <= 0.0.14
  if [[ ! -f $g_env_file ]]; then
    write_env_file
  fi
}

function apt_add_public_signature_key() {
  set_repo_type
  local repo_type="$g_repo_type"
  if [[ $repo_type == "prod" || $repo_type == "stg" ]]; then
    local repo_fqdn=$g_secureupdates_fqdn
    local key_url="https://${repo_fqdn}/sbalinux/sbalinux-gpg-key.public"
  elif [[ $repo_type == "dev"  ]]; then
    local repo_fqdn=$g_artifactory_fqdn
    local key_url="https://${repo_fqdn}/artifactory/api/gpg/key/public"
    # add proxy bypass for artifactory
    bypass_proxy ${repo_fqdn}
  else
    echo "invalid repository type: $repo_type"
    exit 1
  fi
  curl -s $key_url | apt-key add -
}

function import_latest_rpm_repo_key() {
  set_repo_type
  local repo_type="$g_repo_type"
  if [[ $repo_type == "prod" || $repo_type == "stg" ]]; then
    local repo_fqdn=$g_secureupdates_fqdn
    local key_url="https://${repo_fqdn}/sbalinux/sbalinux-gpg-key.asc"
  elif [[ $repo_type == "dev" ]]; then
    local repo_fqdn=$g_artifactory_fqdn
    local key_url="https://${repo_fqdn}/artifactory/SBA_GEN/repo_public_keys/rpm/sbalinux-gpg-key.asc"
    # add proxy bypass for artifactory
    bypass_proxy $repo_fqdn
  else
    echo "invalid repository type: $repo_type"
    exit 1
  fi
  rpm --import $key_url
}

function do_update_from_repo() {
  if [[ $g_package_type == "deb" ]]; then
    if [[ ! -f $g_deb_repo_config_file && -z "$g_force_no_sbalinux_repo" ]]; then
      echo "sbalinux debian repository not defined"
      exit 1
    fi
    apt_add_public_signature_key
    update_deb_pkg_from_repo
  elif [[ $g_package_type == "rpm" ]]; then
    if [[ ! -f $g_rpm_repo_config_file && -z "$g_force_no_sbalinux_repo" ]]; then
      echo "sbalinux rpm repository not defined"
      exit 1
    fi
    import_latest_rpm_repo_key
    update_rpm_pkg_from_repo
  fi
  set_cpla_required_products "${g_blades[@]}"
  # do a custom action
  update_custom_action
  # rewrite update cron job cron.d file and script file in case they need to be updated
  schedule_or_remove_update_cron_job
}

function update_deb_pkg_from_repo() {
  local is_old_pkg
  is_old_pkg=$(is_deb_pkg_installed "$g_old_pkg_name"; echo $?)

  local version_str=""
  if [[ -n $g_version_to_install ]]; then
    version_str="=${g_version_to_install}"
  fi

  apt-get update
  if [ "$is_old_pkg" -eq 0 ]; then
    apt-get install -y "${g_pkg_name}${version_str}"
  else
    apt-get install -y --only-upgrade "${g_pkg_name}${version_str}"
  fi
}

function update_rpm_pkg_from_repo() {
  local is_old_pkg
  is_old_pkg=$(is_rpm_pkg_installed "$g_old_pkg_name"; echo $?)

  # backup configs during update from cpsba-la to cpsba-sbox
  [ "$is_old_pkg" -eq 0 ] && cp /etc/checkpoint/cpla/*-config.json "$g_upgrade_conf_dir"

  if is_suse ; then
    zypper -n refresh
    if [ "$is_old_pkg" -eq 0 ]; then
      # zypper can return ZYPPER_EXIT_INF_RPM_SCRIPT_FAILED, perhaps because of clam
      # however, the packages are removed and this is ok to ignore this exit code
      zypper -n rm "${g_old_pkg_name}" || [[ $? -eq 107 ]]
      zypper -n in "${g_pkg_name}"
    else
      zypper -n up "${g_pkg_name}"
    fi
  else
    if [[ -n $g_version_to_install ]]; then
      local pkg_name=${g_pkg_name}-${g_version_to_install}
      yum install -y "$pkg_name"
    else
      if [ "$is_old_pkg" -eq 0 ]; then
        yum remove -y "${g_old_pkg_name}"
        yum install -y "${g_pkg_name}"
      else
        yum update -y "${g_pkg_name}"
      fi
    fi
  fi


  # return configs after update from cpsba-la to cpsba-sbox
  if [ "$is_old_pkg" -eq 0 ]; then
    mkdir -p /etc/checkpoint/cpla
    cp "$g_upgrade_conf_dir"/* /etc/checkpoint/cpla/
  fi
}

function store_config_dat_file() {
  if [[ ! -z $g_da_config_dat_content ]]; then
    mkdir -p $g_da_config_dat_base_path
    echo $g_da_config_dat_content >$g_da_config_dat_file
  fi
}

# write ca cert and sig file from base64 encoded external arguments
function write_ca_cert_and_sig() {
  if [[ ! -z $g_mgmt_ca_cert_data_base64 && ! -z $g_mgmt_ca_cert_sig_data_base64 ]]; then
    mkdir -p $g_ca_cert_base_path
    echo $g_mgmt_ca_cert_data_base64 | base64 --decode >$g_ca_cert_file
    echo $g_mgmt_ca_cert_sig_data_base64 | base64 --decode >$g_ca_cert_sig_file
  fi
}

function remove_ca_cert_and_sig() {
  find_installed_products
  if ((${#g_installed_products[@]} == 0)); then
    rm -f $g_ca_cert_file
    rm -f $g_ca_cert_sig_file
    set +e
    rm -df $g_ca_cert_base_path
    set -e
  fi
}

function migrate_systemd_conf_to_env_file() {
  local env_file="/etc/checkpoint/cpla/env"
  if [ -e "$g_la_conf_file_path" ] && [ ! -e "$env_file" ]; then
    cp "$g_la_conf_file_path" "$env_file"
    # remove 1st line with '[Service]' and 'Environment=' with quotes
    sed -i -e '1d' -e 's/^Environment="//' -e 's/"$//g' "$env_file"
    set -o allexport; source "$env_file" ; set +o allexport
  fi
}

function remove_repo_file() {
  if [[ $g_package_type == "deb" ]]; then
    rm -f "${g_deb_repo_config_file}"
  elif [[ $g_package_type == "rpm" ]]; then
    if [ -f "${g_rpm_repo_config_file}" ]; then
      rm -f "${g_rpm_repo_config_file}"
    fi
  fi
}

# when exit code trap occurs, display fail message if exit code > 0
function show_exit_code_trap_error() {
  if (($? > 0)); then
    echo "The $g_operation operation failed! ($(date))"
    if [[ $g_operation == "install" ]]; then
      remove_repo_file
      [ -n "$SBA_OFFLINE_PACKAGE" ] && ensure_offline_repo_dir_removed

      if [[ $g_install_with_cron_job == 'yes' ]]; then
        echo "Another installation attempt was scheduled. It will be started by cron in 30 minutes ($g_cron_file_reinstall_path)"
      fi
    fi
  fi
  ensure_upgrade_conf_dir_removed
  ensure_bootstrap_dir_removed
}

# set traps for exit code and ctrl-c to display fail message
function set_trap() {
  trap exit 1 SIGINT
  trap show_exit_code_trap_error EXIT
}

function start_service() {
  local unit_name=$1
  echo "Starting ${unit_name} service"
  systemctl start $unit_name
  # TODO: remove '|| true' after centos_9 installation works
  # without 'Invalid cross-device link' error which doesn't affect cpla service
  systemctl enable $unit_name || true
}

function stop_service() {
  local unit_name=$1
  if systemctl is-active --quiet $unit_name; then
    echo "Stopping ${unit_name} service"
    systemctl stop $unit_name
  fi
  systemctl disable $unit_name
}

function uninstall_all() {
  # if run uninstall with no arguments, i.e. uninstall all
  local ginstalled
  ginstalled=$(echo "$g_uninstall_product" | xargs)
  local gdefault="${g_default_blades_set},fim"
  if [[ "$ginstalled" == "$gdefault" ]] ; then
    echo "yes"
  else
    echo "no"
  fi
}

function set_cpla_required_products() {
  echo "Setting cpla blades list"
  local products=("$@")
  local cmdline=""
  for product in ${products[*]}; do
    blade=${g_prod_to_blade[$product]}
    cmdline="$cmdline -b $blade"
  done
  $g_cpla_path set_required_blades $cmdline
}

function is_deb_pkg_installed() {
  [[ $(dpkg-query -W -f='${Status}' "$1" 2>&1) == 'install ok installed' ]]
}

function is_rpm_pkg_installed() {
  rpm -q "$1" >/dev/null 2>&1
}

function do_update() {
  set_blades_from_products $g_update_product
  # inject "ar" blade if previous installation didn't do it and not only specific blade is requested
  if [[ ! -f $g_ar_injected_flag ]]; then
      if [[ ${#g_blades[@]} -gt 1 && ! "${g_blades[@]}" =~ "ar" ]]; then
          g_blades+=("ar")
      fi
      touch $g_ar_injected_flag
  fi
  if [[ ! -z $SBA_ENABLE_EFR ]]; then
    # inject "efr" blade if previous installation didn't do it and not only specific blade is requested
    if [[ ! -f $g_efr_injected_flag ]]; then
        if [[ ${#g_blades[@]} -gt 1 && ! "${g_blades[@]}" =~ "efr" ]]; then
            g_blades+=("efr")
        fi
        touch $g_efr_injected_flag
    fi
  fi

  # check audit compatibility in case AM or AR need to be updated,
  # or update to version that at least contains tool to check compatibility
  if [[ "${g_blades[@]}" =~ "am" || "${g_blades[@]}" =~ "ar" ]]; then
    verify_am_compatibility 0
  fi

  if [[ $g_package_type == "deb" ]]; then
      set_repo_type
      configure_deb_repo $g_repo_type
  elif [[ $g_package_type == "rpm" ]]; then
      set_repo_type
      configure_rpm_repo $g_repo_type
  fi

  do_update_from_repo

  echo "Installing all blades dependencies of Linux Agent"
  $g_cpla_path install_all
}

function verify_am_compatibility() {
  local need_cleanup=$1
  set +e
  $g_cpla_path check-audit-compat
  local exit_code=$?
  set -e

  # exit code is 1 - fail installation
  if [[ $exit_code -eq 1 ]]; then
    if [[ $need_cleanup -eq 1 ]]; then
      do_uninstall
      remove_install_cron_job
      trap "" EXIT
    fi
    echo "Unable to install Anti Malware. Please contact support."
    exit 1
  fi

  # exit code is 2 - set reboot flag
  if [[ $exit_code -eq 2 ]]; then
    g_need_reboot=1
  fi

  echo "Anti Malware compatibility check completed"
}

# workaround in case installation start in cron which may set default PATH env to "/usr/bin:/bin"
# or "/bin:/usr/bin" on some systems (e.g. ubuntu_18)
# this PATH is insufficient and makes apt fail during upgrade (can't find ldconfig and other binaries)
function enforce_path_env() {
  if [ "$PATH" = "/bin:/usr/bin" ] || [ "$PATH" = "/usr/bin:/bin" ]; then
    export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  fi
}

function enable_install_log_file() {
  mkdir -p "$g_log_base_path"
  exec &> >(tee -a "${g_install_log_file}")
}

function set_install_products_from_blade_mask() {
  local blade_mask="$1"

  if [ "$blade_mask" -eq 65 ]; then
    g_remote_install_products="am"
  elif [ "$blade_mask" -eq 65601 ]; then
    g_remote_install_products="am,bg,edr,ar"
    if [[ ! -z $SBA_ENABLE_EFR ]]; then
      g_remote_install_products+=",efr"
    fi
  else
    echo "invalid value for blade mask ($blade_mask), ignoring it"
  fi
}

if [[ $# -eq 1 && $1 == "--help" ]]; then
  version_str="<developer version>"
  if [[ $SCRIPT_VER =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    version_str="v$SCRIPT_VER"
  fi
  echo "Check Point Sandblast Agent for Linux Installer $version_str"
  echo "Usage: sudo $0 <install|uninstall|config> [options]"
  echo ""
  echo "Possible operations:"
  echo "   install:   install a product"
  echo "   uninstall: uninstall a product"
  echo "   config:    update configuration for an already installed product"
  echo ""
  echo "Options for 'install' operation:"
  echo "  --source <remote|local>             Installation source (default: remote)"
  echo "      remote                          Install from remote package repository"
  echo "      local                           Install from local package file"
  echo "  --product <product>                 Specify product to install, possible products: edr,am (default: both products are installed)"
  echo "                                      Use only if installing from remote package repository"
  echo "  --file_name <file name>             Package file name to install. Use only if installing from local package file"
  echo "  --version <version>                 Product version to install (default: latest). Use only if installing from remote package repository"
  echo "  --url <url>                         Management server url"
  echo "  --key <key>                         Management server key"
  echo "  --http_proxy <url>                  HTTP proxy url"
  echo "  --https_proxy <url>                 HTTPS proxy url"
  echo "  --no_proxy <urls|none|ALL>          bypass proxy for these urls. 'none' leaves the list empty, 'ALL' discards all proxy configuration"
  echo "  --retry <yes|no>                    Schedule another installation attempt if first attempt failed, default: yes"
  echo "  --debug                             Enable debug logging for the client"
  echo "  --selfhealing                       Enable client self-recovery"
  echo "  --auth_principal  <principal>       auth principal which was set up for AD authentication. E.g. krbsvc/sba.com@SBA.COM"
  echo "  --group  <group-guid>               id of virtual directory to put the client into"
  echo ""
  echo "Options for 'uninstall' operation:"
  echo "  --product <product>                 Specify product to uninstall, possible products: edr,am"
  echo ""
  echo "Options for 'config' operation:"
  echo "  --url <url>                         Update management server url"
  echo "  --key <key>                         Update management server key"
  echo "  --http_proxy <url|none>             Update HTTP proxy url. Use 'none' to specify no proxy"
  echo "  --https_proxy <url|none>            Update HTTPS proxy url. Use 'none' to specify no proxy"
  echo "  --no_proxy <urls|none|ALL>          bypass proxy for these urls. Use 'none' for empty list, ',' as delimiter"
  echo "                                      Passing 'ALL' will clear all proxy configuration"
  echo "  --auth_principal  <principal>       auth principal which was set up for AD authentication. E.g. krbsvc/sba.com@SBA.COM"
  echo ""
  exit 0
fi

# exported variable to be used by each product package scripts
# by default pick proxy settings from the environment

export HTTP_PROXY=${HTTP_PROXY:=""}
export HTTPS_PROXY=${HTTPS_PROXY:=""}
export NO_PROXY=${NO_PROXY:=""}
export SBA_MANAGEMENT_KEY=""
export SBA_MANAGEMENT_URL=""
export SBA_CONFIG_DAT_FILE=${SBA_CONFIG_DAT_FILE:=""}
export SBA_ENABLE_BG=${SBA_ENABLE_BG:=""}
export SBA_ENABLE_EFR=${SBA_ENABLE_EFR:=""}
export SBA_FORCE_DISTRO=${SBA_FORCE_DISTRO:=""}
export SBA_AUTH_PRINCIPAL=${SBA_AUTH_PRINCIPAL:=""}
export SBA_USE_DA=${SBA_USE_DA:=""}
export SBA_MITRE=${SBA_MITRE:=""}
export SBA_AR_FORCE_DETECT=${SBA_AR_FORCE_DETECT:=""}
export USE_CPCLAM=${USE_CPCLAM:=""}
export SBA_VDS_LOCATION_GUID=${SBA_VDS_LOCATION_GUID:=""}
# do not use SBA_OFFLINE_PACKAGE from env
# script should figure out whether it's offline or not by itself
export SBA_OFFLINE_PACKAGE=""
export SBA_PRODUCT_UPDATE_DELAY_MIN=${SBA_PRODUCT_UPDATE_DELAY_MIN:=""}
export SBA_DISABLE_TH_ALERTS=${SBA_DISABLE_TH_ALERTS:=""}
export SBA_ONACCESS_EVERYTHING=${SBA_ONACCESS_EVERYTHING:=""}
export SBA_DEPLPOL_UPDATE_CRON_TIMING=${SBA_DEPLPOL_UPDATE_CRON_TIMING:=""}
export SBA_YARA=${SBA_YARA:=""}
export SBA_EXPERIMENTAL_BG_RULES=${SBA_EXPERIMENTAL_BG_RULES:=""}


g_package_type=""
g_distro_name=""
g_distro_version=""
g_rpm_repo_config_file=""

# CA cert and signature
g_mgmt_ca_cert_data_base64=""
g_mgmt_ca_cert_sig_data_base64=""
g_ca_cert_base_path="/var/lib/checkpoint/cpmgmt"
g_ca_cert_file="${g_ca_cert_base_path}/server.crt"
g_ca_cert_sig_file="${g_ca_cert_base_path}/server.crt.sig"

# DA config.dat
g_da_config_dat_content=""
g_da_config_dat_base_path="/var/lib/checkpoint/da"
g_da_config_dat_file="${g_da_config_dat_base_path}/config.dat"

g_install_source="remote"
# flag to indicate that products to install from remote repo were given by the user
g_got_remote_install_product_arg=0
g_efr_injected_flag=/etc/checkpoint/.efr_injected

if [[ $ARCH == "x86_64" ]]; then
  g_default_blades_set="edr,am,bg,ar"
  if [[ ! -z $SBA_ENABLE_EFR || -f $g_efr_injected_flag ]]; then
    g_default_blades_set+=",efr"
  fi
else
  g_default_blades_set="am,ar"
fi

g_need_reboot=0
g_ar_injected_flag=/etc/checkpoint/.ar_injected

g_remote_install_products=${g_default_blades_set}
g_local_install_file_name=""
g_repo_type="prod"
g_uninstall_product="${g_default_blades_set},fim"
g_update_product=${g_default_blades_set}

# products requested to be installed or uninstalled
g_blades=()
# products actually installed
g_installed_products=()
# specific product version to install
g_version_to_install=""

g_update_cron_timing=${SBA_UPDATE_CRON_TIMING:="0 * * * *"}
g_install_cron_timing=${SBA_INSTALL_CRON_TIMING:="*/30 * * * *"}


g_log_base_path="/var/log/checkpoint/common"
g_install_log_file="${g_log_base_path}/sbalinux-install.log"
g_update_log_file="${g_log_base_path}/sbalinux-update.log"
g_switch_repo_log_file="${g_log_base_path}/sbalinux-product-update.log"

g_should_schedule_upgrade="yes"
g_install_with_cron_job="yes"
g_cron_file_reinstall_path="/etc/cron.d/sbalinux-install"
g_cron_file_switch_repo_path="/etc/cron.d/sbalinux-product-update"

g_la_conf_file_path="/etc/systemd/system/cpla.service.d/cpla.conf"
# for testing: systemctl show --property=Environment <service>

g_args="${@}"

g_deb_repo_config_file="/etc/apt/sources.list.d/sbalinux.list"

g_secureupdates_fqdn="secureupdates.checkpoint.com"
g_artifactory_fqdn="artifactory-npm.checkpoint.com"

# folder to save helper scripts generated for the update process
g_save_folder="/etc/checkpoint/common"
# path to saved install script used for cron job updates
g_saved_script="${g_save_folder}/install.sh"
# env file path
g_env_file="${g_save_folder}/sbalinux.env"
# package name for installer updates
g_installer_package_name="cpsba-install"
g_cpla_path="/usr/bin/cpla"
# package names
g_pkg_name="cpsba-sbox"
g_old_pkg_name="cpsba-la"
# map product name to cpla blade name
declare -A g_prod_to_blade
g_prod_to_blade['am']="AM"
g_prod_to_blade['edr']="SBA"
g_prod_to_blade['bg']="BG"
g_prod_to_blade['fim']="FIM"
g_prod_to_blade['ar']="AR"
g_prod_to_blade['efr']="EFR"

g_upgrade_conf_dir=$(mktemp -d)
g_force_no_sbalinux_repo=""
# offline_package related variables
g_offline_repo_path="/var/lib/checkpoint/sbalinux_offline"
g_bootstrap_dir=
# leave configs/logs/etc after removal, don't notify mgmt
# during deployment policy handling to switch online/offline package
g_switching_repo=0
# universal repo name
g_universal_repo="universal"


# parse args
g_operation=${1:-""}
if [[ -z $g_operation ]]; then
  echo "operation not defined, for usage run: $0 --help"
  exit 1
fi
shift

# apply valid external arguments so they can serve as defaults
apply_embedded_arguments

# parse command line arguments
set +e

if [[ $g_operation == "install" ]]; then
  while (($#)); do
    if [[ $1 == "--http_proxy" ]]; then
      shift
      export HTTP_PROXY=${1:-""}
      export http_proxy=${1:-""}
    elif [[ $1 == "--https_proxy" ]]; then
      shift
      export HTTPS_PROXY=${1:-""}
      export https_proxy=${1:-""}
    elif [[ $1 == "--no_proxy" ]]; then
      shift
      export NO_PROXY=${1:-""}
      export no_proxy=${1:-""}
      if [[ $1 == "ALL" ]]; then
        export HTTP_PROXY=""
        export HTTPS_PROXY=""
        export NO_PROXY=""
        export http_proxy=""
        export https_proxy=""
        export no_proxy=""
      fi
    elif [[ $1 == "--key" ]]; then
      shift
      export SBA_MANAGEMENT_KEY=${1:-""}
    elif [[ $1 == "--url" ]]; then
      shift
      export SBA_MANAGEMENT_URL=${1:-""}
    elif [[ $1 == "--source" ]]; then
      shift
      g_install_source=${1:-""}
    elif [[ $1 == "--product" ]]; then
      shift
      g_remote_install_products=${1:-""}
      g_got_remote_install_product_arg=1
    elif [[ $1 == "--file_name" ]]; then
      shift
      g_local_install_file_name=${1:-""}
    elif [[ $1 == "--version" ]]; then
      shift
      g_version_to_install=${1:-""}
    elif [[ $1 == "--retry" ]]; then
      shift
      g_install_with_cron_job=${1:-""}
    elif [[ $1 == "--debug" ]]; then
      export SBA_LOG_LEVEL=DEBUG
      shift
    elif [[ $1 == "--selfhealing" ]]; then
      export SBA_SELF_HEALING=1
      shift
    elif [[ $1 == "--auth_principal" ]]; then
      shift
      export SBA_AUTH_PRINCIPAL=${1:-""}
    elif [[ $1 == "--group" ]]; then
      shift
      export SBA_VDS_LOCATION_GUID=${1:-""}
    elif [[ $1 == "--upgrade" ]]; then
      shift
      g_should_schedule_upgrade=${1:-""}
    elif [[ $1 == "--stg" ]]; then
      shift
      export SBA_REPO_TYPE=stg
    # Just for the SIPLEC, do not pre-configure sbalinux repo
    elif [[ $1 == "--satellite" ]]; then
      g_force_no_sbalinux_repo=${1:-""}
      shift
    else
      echo "invalid argument $1"
      exit 1
    fi
    shift
  done
elif [[ $g_operation == "config" ]]; then
  num_of_config_args=0
  # dont inherit anything from the environment
  HTTP_PROXY=""
  HTTPS_PROXY=""
  NO_PROXY=""
  SBA_MANAGEMENT_KEY=""
  SBA_MANAGEMENT_URL=""
  SBA_AUTH_PRINCIPAL=""

  while (($#)); do
    if [[ $1 == "--http_proxy" ]]; then
      shift
      export HTTP_PROXY=${1:-""}
    elif [[ $1 == "--https_proxy" ]]; then
      shift
      export HTTPS_PROXY=${1:-""}
    elif [[ $1 == "--no_proxy" ]]; then
      shift
      export NO_PROXY=${1:-""}
      if [[ $1 == "ALL" ]]; then
        export HTTP_PROXY="none"
        export HTTPS_PROXY="none"
        export NO_PROXY="none"
      fi
    elif [[ $1 == "--key" ]]; then
      shift
      export SBA_MANAGEMENT_KEY=${1:-""}
    elif [[ $1 == "--url" ]]; then
      shift
      export SBA_MANAGEMENT_URL=${1:-""}
    elif [[ $1 == "--auth_principal" ]]; then
      shift
      export SBA_AUTH_PRINCIPAL=${1:-""}
    else
      echo "invalid argument $1"
      exit 1
    fi
    [[ -z ${1:-""} ]] && echo "missing value for config option" && exit 1 || (( num_of_config_args++ ))
    shift
  done
elif [[ $g_operation == "uninstall" ]]; then
  while (($#)); do
    if [[ $1 == "--product" ]]; then
      shift
      g_uninstall_product=${1:-""}
    elif [[ $1 == "--switching-repo" ]]; then
      shift
      g_switching_repo=1
    else
      echo "invalid argument $1"
      exit 1
    fi
    shift
  done

elif [[ $g_operation == "update" ]]; then
  while (($#)); do
    if [[ $1 == "--product" ]]; then
      shift
      g_update_product=${1:-""}
    elif [[ $1 == "--satellite" ]]; then
      shift
      g_force_no_sbalinux_repo=${1:-""}
    elif [[ $1 == "--version" ]]; then
      shift
      g_version_to_install=${1:-""}
    else
      echo "invalid argument $1. Use update without arguments or with --product <am,edr,bg>"
      exit 1
    fi
    shift
  done
else
  echo "invalid operation '${g_operation}', valid operations are 'install', 'uninstall'"
  exit 1
fi

set -e

enforce_path_env

# detect distribution and package time
detect_package_type
if [[ -z $g_package_type ]]; then
  echo "Unsupported distribution or architecture"
  exit 1
fi

# main
if [[ $g_operation == "install" ]]; then
  enable_install_log_file
  check_offline_package
  check_install_cmd_args
  check_umask
  force_env_vars
  set_trap

  find_installed_products
  [ -n "$SBA_OFFLINE_PACKAGE" ] && prepare_offline_package
  if ((${#g_installed_products[@]} == 0)); then
    if [[ $g_install_source == "remote" || -n "$SBA_OFFLINE_PACKAGE" ]] ; then
      if [ -n "$SBA_OFFLINE_PACKAGE" ]; then
        echo "Offline install"
      else
        echo "Remote install"
      fi
      do_remote_install
    elif [[ $g_install_source == "local" ]]; then
      echo "Local install"
      do_file_install
    else
      echo "invalid install source mode"
      exit 1
    fi
  else
    echo "cpla is already installed, set of blades will be updated."
    stop_service "cpla"
    set_blades_from_products $g_remote_install_products
  fi

  # let know to futher updates that this script was able to install "ar" if needed
  # so updater no need inject "ar" blade to product
  touch $g_ar_injected_flag

  if [[ ! -z $SBA_ENABLE_EFR ]]; then
    # let know to further updates that this script was able to install "efr" if needed
    # so updater no need to inject "efr" blade into product
    touch $g_efr_injected_flag
  fi

  # check audit compatibility in case AM need to be installed
  if [[ "${g_blades[@]}" =~ "am" || "${g_blades[@]}" =~ "ar" ]]; then
    verify_am_compatibility 1
  fi

  set_cpla_required_products "${g_blades[@]}"

  echo "Installing all blades dependencies of Linux Agent"
  $g_cpla_path install_all
  start_service "cpla"

  if [[ $g_need_reboot == 1 ]]; then
    echo "Rebooting the system"
    reboot
  fi


elif [[ $g_operation == "uninstall" ]]; then
  echo "Uninstall all: $(uninstall_all)"
  set_trap
  set_blades_from_products $g_uninstall_product
  stop_service cpla
  current_blades=$($g_cpla_path get_required_blades)
  echo "Blades installed in cpla: $current_blades"
  for product in ${g_blades[*]}; do
    echo "Deleting ${g_prod_to_blade["$product"]} blade"
    set +e
    $g_cpla_path uninstall_blade -b ${g_prod_to_blade["$product"]}
    set -e
  done
  current_blades=$($g_cpla_path get_required_blades)

  if [[ (-z "$current_blades" || "$current_blades" = "Blades: ") && "$(uninstall_all)" == "yes" ]] ; then
    do_uninstall
  else
    $g_cpla_path install_all
    echo "CPLA still contain installed blades $current_blades"
    start_service cpla
  fi
elif [[ $g_operation == "config" ]]; then
  check_config_cmd_args
  set_trap
  do_config
  echo "Restarting cpla service"
  systemctl restart cpla
elif [[ $g_operation == "update" ]]; then
  migrate_systemd_conf_to_env_file
  set_trap
  do_update
  start_service "cpla"
fi

echo $'\n'"The $g_operation operation completed successfully ($(date))"

exit 0
